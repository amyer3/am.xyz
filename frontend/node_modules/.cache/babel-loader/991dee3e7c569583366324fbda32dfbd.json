{"ast":null,"code":"import _slicedToArray from \"/Users/Alex/WebstormProjects/am.xyz/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/Alex/WebstormProjects/am.xyz/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Alex/WebstormProjects/am.xyz/frontend/src/App.js\";\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n    display: grid;\\n    grid-template-columns: 30% 5% 30% 5% 30%;\\n    grid-template-rows: 50% 50%;\\n    grid-template-areas:\\n    \\\"li s1 gh s2 ct\\\"\\n    \\\"map map map map map\\\";\\n    grid-area: buttons;\\n    margin: 0;\\n    padding: 0;\\n\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n    border: 3px solid white;\\n    border-radius: 5px;\\n    display: inline-block;\\n    color: white;\\n    background-color: transparent;\\n    max-width: 200px;\\n    max-height: 50px;\\n    font-size: 32px;\\n    font-family: 'ABeeZee', Serif;\\n    grid-area: \", \"\\n    width: 100%;\\n    text-align: center;\\n    text-decoration: none;\\n    outline: 0;\\n\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n    display: inline-grid;\\n    grid-template-columns: 10vw 40vw ;\\n    grid-template-rows: 10vh 10vh 55vh 25vh;\\n    grid-template-areas: \\n    \\\"cs toggle\\\"\\n    \\\"cs space\\\"\\n    \\\"cs words\\\"\\n    \\\"cs buttons\\\"\\n\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n    font-size: 42pt;\\n    padding: 0;\\n    color: white;\\n    font-family: 'ABeeZee', Serif;\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    font-size: 22pt;\\n    line-height: 100%;\\n    padding: 0;\\n    width: 50vw;\\n    display: inline-block;\\n    grid-area: words;\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    font-size: \", \"pt;\\n    padding: 0;\\n    margin: 0;\\n    transition: font-size 0.5s;\\n    width: 1.5vw\\n    text-align: center;\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    color: white;\\n    font-family: 'ABeeZee', Serif;\\n    padding: 0;\\n    width: 10vw;\\n    text-align: left;\\n    grid-area: toggle;\\n    cursor: pointer;\\n    display: flex;\\n    align-self: center;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    height: 100vh;\\n    width: auto;\\n    float: right;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    background-color: #0D1836;\\n    width: 100vw;\\n    height: 100vh;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport './langSlider.css';\nimport styled from 'styled-components';\nimport cut from \"./cut.svg\";\n/*\nUse this to pull all photos from a folder, and make an array from them\nfunction importAll(r) {\n    return r.keys().map(r);\n}\nconst images = importAll(require.context('./assets/photos/', false, /\\.(png|jpe?g|svg)$/));\n*/\n\nvar BackgroundDiv = styled.div(_templateObject());\nvar CutImage = styled.img(_templateObject2());\nvar LangToggle = styled.div(_templateObject3());\nvar LangP = styled.div(_templateObject4(), function (props) {\n  return props.size;\n});\nvar Words = styled.div(_templateObject5());\nvar InlinePara = styled.p(_templateObject6());\nvar Grid = styled.div(_templateObject7());\nvar LinkButton = styled.a(_templateObject8(), function (props) {\n  return props.area;\n});\nvar ButtonGrid = styled.div(_templateObject9());\nexport function App() {\n  var _useState = useState(1),\n      _useState2 = _slicedToArray(_useState, 2),\n      en = _useState2[0],\n      changeLang = _useState2[1];\n  /*\n  changeLang = () => {\n      this.state.lang === 'en' || \"\" ? this.setState({lang: \"fr\"}) : this.setState({lang: \"en\"});\n  };\n  toggleMap = () => {\n      console.log(this.state.mapVisible)\n      this.state.mapVisible === 0 ? this.setState({mapVisible: 1}) : this.setState({mapVisible: 0})\n  }\n  */\n\n\n  var handleChange = function handleChange() {\n    return changeLang(!en) && console.log(en);\n  };\n\n  return React.createElement(BackgroundDiv, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(LangToggle, {\n    onClick: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(LangP, {\n    size: en ? 14 : 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"EN\"), React.createElement(LangP, {\n    size: 14,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"|\"), React.createElement(LangP, {\n    size: en ? 12 : 14,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"FR\")), React.createElement(Words, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(InlinePara, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(\"u\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"Alex\")), React.createElement(InlinePara, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, en ? \"Engineering\" : \"Ingénierie\", \".\"), React.createElement(InlinePara, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, en ? \"Strategy\" : \"Stratégie\", \".\"), React.createElement(InlinePara, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, en ? \"Mostly edible baking\" : \"\", \".\")), React.createElement(ButtonGrid, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(LinkButton, {\n    href: 'linkedin.com/in/alexjmyers',\n    area: 'li',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, \"Linkedin\"), React.createElement(LinkButton, {\n    href: 'linkedin.com/in/alexjmyers',\n    area: 'gh',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"Github\"), React.createElement(LinkButton, {\n    href: 'mailto:me@am.xyz?',\n    area: 'ct',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, en ? \"Contact\" : \"Contactez\"))), React.createElement(CutImage, {\n    src: cut,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }));\n}\nexport default App;","map":{"version":3,"sources":["/Users/Alex/WebstormProjects/am.xyz/frontend/src/App.js"],"names":["React","useState","styled","BackgroundDiv","div","CutImage","img","LangToggle","LangP","props","size","Words","InlinePara","p","Grid","LinkButton","a","area","ButtonGrid","App","en","changeLang","handleChange","console","log","cut"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport './langSlider.css'\nimport styled from 'styled-components'\nimport cut from './cut.svg'\n\n/*\nUse this to pull all photos from a folder, and make an array from them\nfunction importAll(r) {\n    return r.keys().map(r);\n}\nconst images = importAll(require.context('./assets/photos/', false, /\\.(png|jpe?g|svg)$/));\n*/\n\nconst BackgroundDiv = styled.div`\n    background-color: #0D1836;\n    width: 100vw;\n    height: 100vh;\n`\nconst CutImage = styled.img`\n    height: 100vh;\n    width: auto;\n    float: right;\n`\nconst LangToggle = styled.div`\n    color: white;\n    font-family: 'ABeeZee', Serif;\n    padding: 0;\n    width: 10vw;\n    text-align: left;\n    grid-area: toggle;\n    cursor: pointer;\n    display: flex;\n    align-self: center;\n`\n\nconst LangP = styled.div`\n    font-size: ${props => props.size}pt;\n    padding: 0;\n    margin: 0;\n    transition: font-size 0.5s;\n    width: 1.5vw\n    text-align: center;\n`\n\nconst Words = styled.div`\n    font-size: 22pt;\n    line-height: 100%;\n    padding: 0;\n    width: 50vw;\n    display: inline-block;\n    grid-area: words;\n`\n\nconst InlinePara = styled.p`\n    font-size: 42pt;\n    padding: 0;\n    color: white;\n    font-family: 'ABeeZee', Serif;\n`\nconst Grid = styled.div`\n    display: inline-grid;\n    grid-template-columns: 10vw 40vw ;\n    grid-template-rows: 10vh 10vh 55vh 25vh;\n    grid-template-areas: \n    \"cs toggle\"\n    \"cs space\"\n    \"cs words\"\n    \"cs buttons\"\n`\nconst LinkButton = styled.a`\n    border: 3px solid white;\n    border-radius: 5px;\n    display: inline-block;\n    color: white;\n    background-color: transparent;\n    max-width: 200px;\n    max-height: 50px;\n    font-size: 32px;\n    font-family: 'ABeeZee', Serif;\n    grid-area: ${props => props.area}\n    width: 100%;\n    text-align: center;\n    text-decoration: none;\n    outline: 0;\n`\nconst ButtonGrid = styled.div`\n    display: grid;\n    grid-template-columns: 30% 5% 30% 5% 30%;\n    grid-template-rows: 50% 50%;\n    grid-template-areas:\n    \"li s1 gh s2 ct\"\n    \"map map map map map\";\n    grid-area: buttons;\n    margin: 0;\n    padding: 0;\n`\n\nexport function App() {\n    const [en, changeLang] = useState(1)\n    /*\n    changeLang = () => {\n        this.state.lang === 'en' || \"\" ? this.setState({lang: \"fr\"}) : this.setState({lang: \"en\"});\n    };\n    toggleMap = () => {\n        console.log(this.state.mapVisible)\n        this.state.mapVisible === 0 ? this.setState({mapVisible: 1}) : this.setState({mapVisible: 0})\n    }\n    */\n    var handleChange = () => changeLang(!en) && console.log(en)\n\n    return (\n        <BackgroundDiv>\n            <Grid>\n                <LangToggle onClick={handleChange}>\n                    <LangP size={en ? 14 : 12}>EN</LangP> \n                    <LangP size={14}>|</LangP>\n                    <LangP size={en ? 12 : 14}>FR</LangP>\n                </LangToggle>\n                <Words>\n                    <InlinePara><u>Alex</u></InlinePara>\n                    <InlinePara>{en ? \"Engineering\" : \"Ingénierie\"}.</InlinePara>\n                    <InlinePara>{en ? \"Strategy\" : \"Stratégie\"}.</InlinePara>\n                    <InlinePara>{en ? \"Mostly edible baking\" : \"\"}.</InlinePara>\n                </Words>\n                <ButtonGrid>\n                    <LinkButton href={'linkedin.com/in/alexjmyers'} area={'li'}>Linkedin</LinkButton>\n                    <LinkButton href={'linkedin.com/in/alexjmyers'} area={'gh'}>Github</LinkButton>\n                    <LinkButton href={'mailto:me@am.xyz?'} area={'ct'}>{en ? \"Contact\" : \"Contactez\"}</LinkButton>\n                </ButtonGrid>\n            </Grid>\n            <CutImage src={cut} />\n        </BackgroundDiv>\n    )\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}